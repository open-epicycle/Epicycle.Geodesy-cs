// AUTOGENERATED, DO NOT MODIFY

// [[[[INFO>
// Copyright 2015 Epicycle (http://epicycle.org, https://github.com/open-epicycle)
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// For more information check https://github.com/open-epicycle/Epicycle.Geodesy-cs
// ]]]]

using Epicycle.Math.Geometry;

namespace Epicycle.Geodesy
{

    public static class GeoPoint2Utils
    {
        public static Vector3 ToEcef(this GeoPoint2 point, GeoDatum datum)
        {
            return GeoPoint3Utils.ToEcef((GeoPoint3)point, datum);
        }

        public static RotoTranslation3 Enu(this GeoPoint2 origin, GeoDatum datum)
        {
            return GeoPoint3Utils.Enu((GeoPoint3)origin, datum);
        }

        public sealed class YamlSerialization
        {
            public double Lat { get; set; }
            public double Long { get; set; }

            public YamlSerialization() { }

            public YamlSerialization(GeoPoint3 geoPoint3)
            {
                Lat = geoPoint3.Latitude_deg;
                Long = geoPoint3.Longtitude_deg;
            }

            public GeoPoint3 Deserialize()
            {
                return GeoPoint2.InDegrees(Lat, Long);
            }
        }
    }
}
